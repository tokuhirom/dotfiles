#!/usr/bin/env yaegi
package main
// vim: set filetype=go noexpandtab tabstop=4 shiftwidth=4:

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"time"
)

// ANSI color codes
const (
	Reset       = "\033[0m"
	Grey23      = "\033[38;5;59m"
	Blue        = "\033[34m"
	Red         = "\033[31m"
	Bold        = "\033[1m"
	BrightRed   = "\033[91m"
	OnBlack     = "\033[40m"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	for scanner.Scan() {
		line := scanner.Text()

		if strings.HasPrefix(line, "{") {
			var data map[string]interface{}
			if err := json.Unmarshal([]byte(line), &data); err != nil {
				fmt.Println(line)
				continue
			}

			// Convert time to a more readable format
			timeStr, _ := data["time"].(string)
			t, err := time.Parse(time.RFC3339, timeStr)
			if err == nil {
				timeStr = t.Format("15:04:05")
			}

			// Print the formatted log
			fmt.Print(Grey23, timeStr, Reset)
			fmt.Print(" [")
			fmt.Print(Blue, data["level"].(string), Reset)
			fmt.Print("] ")

			// Remove used keys
			for _, key := range []string{"time", "level"} {
				delete(data, key)
			}

			if url, ok := data["URL"]; ok {
				fmt.Printf("%s %s %-6s %s ", data["process_name"], data["req_id"], data["method"], url)
				fmt.Print(data["msg"])

				if latency, ok := data["latency"]; ok {
					fmt.Print(" ", latency)
				}
				if statusCode, ok := data["status_code"]; ok {
					code := int(statusCode.(float64))
					if code == 200 {
						fmt.Print(" ", Blue, code, Reset)
					} else {
						fmt.Print(" ", Red, code, Reset)
					}
				}
				fmt.Println()

				// Remove used keys
				for _, key := range []string{"method", "msg", "req_id", "URL", "latency", "status_code"} {
					delete(data, key)
				}
			} else {
				fmt.Print("[")
				fmt.Print(data["process_name"])
				fmt.Print("] ")
				fmt.Print(Bold, BrightRed, OnBlack, data["msg"], Reset)
				fmt.Println()

				// Remove used keys
				for _, key := range []string{"process_name", "msg"} {
					delete(data, key)
				}
			}

			if len(data) > 0 {
				extras, _ := json.MarshalIndent(data, "                ", "  ")
				fmt.Println("                ", string(extras))
			}
		} else {
			fmt.Println(line)
		}
	}

	if err := scanner.Err(); err != nil {
		fmt.Fprintln(os.Stderr, "reading standard input:", err)
	}
}
